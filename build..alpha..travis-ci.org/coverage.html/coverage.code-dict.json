{"/home/travis/build/npmtest/node-npmtest-thepiratebay/test.js":"/* istanbul instrument in package npmtest_thepiratebay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-thepiratebay/lib.npmtest_thepiratebay.js":"/* istanbul instrument in package npmtest_thepiratebay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_thepiratebay = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_thepiratebay = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-thepiratebay/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-thepiratebay && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_thepiratebay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_thepiratebay\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_thepiratebay.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_thepiratebay.rollup.js'] =\n            local.assetsDict['/assets.npmtest_thepiratebay.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_thepiratebay.__dirname +\n                    '/lib.npmtest_thepiratebay.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-thepiratebay/node_modules/thepiratebay/lib/PirateBay.js":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'babel-runtime/helpers/typeof', 'babel-runtime/helpers/objectWithoutProperties', 'babel-runtime/helpers/extends', 'form-data', 'querystring', './Parser'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('babel-runtime/helpers/typeof'), require('babel-runtime/helpers/objectWithoutProperties'), require('babel-runtime/helpers/extends'), require('form-data'), require('querystring'), require('./Parser'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global._typeof, global.objectWithoutProperties, global._extends, global.formData, global.querystring, global.Parser);\n    global.PirateBay = mod.exports;\n  }\n})(this, function (exports, _typeof2, _objectWithoutProperties2, _extends2, _formData, _querystring, _Parser) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.primaryCategoryNumbers = exports.defaultOrder = exports.baseUrl = undefined;\n  exports.convertOrderByObject = convertOrderByObject;\n  exports.search = search;\n  exports.getTorrent = getTorrent;\n  exports.getComments = getComments;\n  exports.topTorrents = topTorrents;\n  exports.recentTorrents = recentTorrents;\n  exports.userTorrents = userTorrents;\n  exports.getTvShow = getTvShow;\n  exports.getCategories = getCategories;\n\n  var _typeof3 = _interopRequireDefault(_typeof2);\n\n  var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\n  var _extends3 = _interopRequireDefault(_extends2);\n\n  var _formData2 = _interopRequireDefault(_formData);\n\n  var _querystring2 = _interopRequireDefault(_querystring);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var baseUrl = exports.baseUrl = process.env.THEPIRATEBAY_DEFAULT_ENDPOINT || 'https://thepiratebay.org';\n  // $FlowFixMe - form-data library not supported\n  var defaultOrder = exports.defaultOrder = { orderBy: 'seeds', sortBy: 'desc' };\n\n  var searchDefaults = {\n    category: '0',\n    page: '0',\n    filter: {\n      verified: false\n    },\n    orderBy: 'seeds',\n    sortBy: 'desc'\n  };\n\n  var primaryCategoryNumbers = exports.primaryCategoryNumbers = {\n    audio: 100,\n    video: 200,\n    applications: 300,\n    games: 400,\n    xxx: 500,\n    other: 600\n  };\n\n  /*\n   * opts:\n   *  category\n   *    0   - all\n   *    101 - 699\n   *  page\n   *    0 - 99\n   *  orderBy\n   *     1  - name desc\n   *     2  - name asc\n   *     3  - date desc\n   *     4  - date asc\n   *     5  - size desc\n   *     6  - size asc\n   *     7  - seeds desc\n   *     8  - seeds asc\n   *     9  - leeches desc\n   *     10 - leeches asc\n   */\n\n  /**\n   * Take a orderBy object and convert it to its according number\n   *\n   * @example: { orderBy: 'leeches', sortBy: 'asc' }\n   * @example: { orderBy: 'name', sortBy: 'desc' }\n   */\n  function convertOrderByObject() {\n    var orderByObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOrder;\n\n    var options = [['name', 'desc'], ['name', 'asc'], ['date', 'desc'], ['date', 'asc'], ['size', 'desc'], ['size', 'asc'], ['seeds', 'desc'], ['seeds', 'asc'], ['leeches', 'desc'], ['leeches', 'asc']];\n\n    // Find the query option\n    var option = options.find(function (_option) {\n      return _option.includes(orderByObject.orderBy) && _option.includes(orderByObject.sortBy);\n    });\n\n    // Get the index of the query option\n    var searchNumber = option ? options.indexOf(option) + 1 : undefined;\n\n    if (!searchNumber) throw Error(\"Can't find option\");\n\n    return searchNumber;\n  }\n\n  /**\n   * Helper method for parsing page numbers\n   */\n  function castNumberToString(pageNumber) {\n    if (typeof pageNumber === 'number') {\n      return String(pageNumber);\n    }\n\n    if (typeof pageNumber === 'string') {\n      return pageNumber;\n    }\n\n    if (typeof pageNumber !== 'string' || typeof pageNumber !== 'number') {\n      throw new Error('Unexpected page number type');\n    }\n\n    throw new Error('Unable to cast ' + pageNumber + ' to string');\n  }\n\n  /**\n   * Determine the category number from an category name ('movies', 'audio', etc)\n   */\n  function resolveCategory(categoryParam, defaultCategory) {\n    if (typeof categoryParam === 'number') {\n      return categoryParam;\n    }\n\n    if (typeof categoryParam === 'string') {\n      if (categoryParam in primaryCategoryNumbers) {\n        return primaryCategoryNumbers[categoryParam];\n      }\n    }\n\n    return defaultCategory;\n  }\n\n  function search() {\n    var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var convertedCategory = resolveCategory(opts.category, parseInt(searchDefaults.category, 10));\n\n    var castedOptions = (0, _extends3.default)({}, opts, {\n      page: opts.page ? castNumberToString(opts.page) : searchDefaults.page,\n      category: opts.category ? castNumberToString(convertedCategory) : searchDefaults.category,\n      orderby: opts.orderby ? castNumberToString(opts.orderby) : searchDefaults.orderBy\n    });\n\n    var _searchDefaults$caste = (0, _extends3.default)({}, searchDefaults, castedOptions),\n        page = _searchDefaults$caste.page,\n        category = _searchDefaults$caste.category,\n        orderBy = _searchDefaults$caste.orderBy,\n        sortBy = _searchDefaults$caste.sortBy,\n        rest = (0, _objectWithoutProperties3.default)(_searchDefaults$caste, ['page', 'category', 'orderBy', 'sortBy']);\n\n    var orderingNumber = convertOrderByObject({ orderBy: orderBy, sortBy: sortBy });\n\n    var url = baseUrl + '/s/?' + _querystring2.default.stringify({\n      q: title,\n      category: category,\n      page: page,\n      orderby: orderingNumber\n    });\n\n    return (0, _Parser.parsePage)(url, _Parser.parseResults, rest.filter);\n  }\n\n  function getTorrent(id) {\n    var url = function () {\n      if ((typeof id === 'undefined' ? 'undefined' : (0, _typeof3.default)(id)) === 'object') {\n        return id.link;\n      }\n      return typeof id === 'number' || /^\\d+$/.test(id) ? baseUrl + '/torrent/' + id :\n      // If id is an object return it's link property. Otherwise,\n      // return 'id' itself\n      id;\n    }();\n\n    return (0, _Parser.parsePage)(url, _Parser.parseTorrentPage);\n  }\n\n  function getComments(id) {\n    var url = baseUrl + '/ajax_details_comments.php';\n    var formData = new _formData2.default();\n    formData.append('id', id);\n    return (0, _Parser.parsePage)(url, _Parser.parseCommentsPage, {}, 'POST', formData);\n  }\n\n  function topTorrents() {\n    var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';\n\n    var castedCategory = void 0;\n\n    // Check if category is number and can be casted\n    if (parseInt(category, 10)) {\n      castedCategory = castNumberToString(category);\n    }\n\n    return (0, _Parser.parsePage)(baseUrl + '/top/' + (castedCategory || category), _Parser.parseResults);\n  }\n\n  function recentTorrents() {\n    return (0, _Parser.parsePage)(baseUrl + '/recent', _Parser.parseResults);\n  }\n\n  function userTorrents(username) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var orderby = opts.orderby;\n\n\n    // Determine orderingNumber given orderBy and sortBy\n    if (opts.sortBy || opts.orderBy) {\n      orderby = convertOrderByObject({\n        sortBy: opts.sortBy || 'desc',\n        orderBy: opts.orderBy || 'seeds'\n      });\n    }\n\n    var query = baseUrl + '/user/' + username + '/?' + _querystring2.default.stringify({\n      page: opts.page ? castNumberToString(opts.page) : '0',\n      orderby: orderby || '99'\n    });\n\n    return (0, _Parser.parsePage)(query, _Parser.parseResults);\n  }\n\n  /**\n   * @TODO: url not longer returning results\n   */\n  function getTvShow(id) {\n    return (0, _Parser.parsePage)(baseUrl + '/tv/' + id, _Parser.parseTvShow);\n  }\n\n  function getCategories() {\n    return (0, _Parser.parsePage)(baseUrl + '/recent', _Parser.parseCategories);\n  }\n\n  exports.default = {\n    search: search,\n    getTorrent: getTorrent,\n    getComments: getComments,\n    topTorrents: topTorrents,\n    recentTorrents: recentTorrents,\n    userTorrents: userTorrents,\n    getTvShow: getTvShow,\n    getCategories: getCategories\n  };\n});","/home/travis/build/npmtest/node-npmtest-thepiratebay/node_modules/thepiratebay/lib/Parser.js":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'babel-runtime/core-js/promise', 'babel-runtime/regenerator', 'babel-runtime/helpers/asyncToGenerator', 'cheerio', 'isomorphic-fetch', 'url-parse', './PirateBay'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('babel-runtime/core-js/promise'), require('babel-runtime/regenerator'), require('babel-runtime/helpers/asyncToGenerator'), require('cheerio'), require('isomorphic-fetch'), require('url-parse'), require('./PirateBay'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.promise, global.regenerator, global.asyncToGenerator, global.cheerio, global.isomorphicFetch, global.urlParse, global.PirateBay);\n    global.Parser = mod.exports;\n  }\n})(this, function (exports, _promise, _regenerator, _asyncToGenerator2, _cheerio, _isomorphicFetch, _urlParse, _PirateBay) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getProxyList = undefined;\n  exports._parseTorrentIsVIP = _parseTorrentIsVIP;\n  exports._parseTorrentIsTrusted = _parseTorrentIsTrusted;\n  exports.isTorrentVerified = isTorrentVerified;\n  exports.parsePage = parsePage;\n  exports.parseResults = parseResults;\n  exports.parseTvShow = parseTvShow;\n  exports.parseTorrentPage = parseTorrentPage;\n  exports.parseTvShows = parseTvShows;\n  exports.parseCategories = parseCategories;\n  exports.parseCommentsPage = parseCommentsPage;\n\n  var _promise2 = _interopRequireDefault(_promise);\n\n  var _regenerator2 = _interopRequireDefault(_regenerator);\n\n  var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\n  var _cheerio2 = _interopRequireDefault(_cheerio);\n\n  var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\n  var _urlParse2 = _interopRequireDefault(_urlParse);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  /* eslint promise/no-promise-in-callback: 0, max-len: [2, 200] */\n\n  /**\n   * Parse all pages\n   * \n   */\n  var maxConcurrentRequests = 3;\n\n  function _parseTorrentIsVIP(element) {\n    return element.find('img[title=\"VIP\"]').attr('title') === 'VIP';\n  }\n\n  function _parseTorrentIsTrusted(element) {\n    return element.find('img[title=\"Trusted\"]').attr('title') === 'Trusted';\n  }\n\n  function isTorrentVerified(element) {\n    return _parseTorrentIsVIP(element) || _parseTorrentIsTrusted(element);\n  }\n\n  var getProxyList = exports.getProxyList = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var response, $, links;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (0, _isomorphicFetch2.default)('https://proxybay.tv/').then(function (res) {\n                return res.text();\n              });\n\n            case 2:\n              response = _context.sent;\n              $ = _cheerio2.default.load(response);\n              links = $('[rel=\"nofollow\"]').map(function getElementLinks() {\n                return $(this).attr('href');\n              }).get().filter(function (res, index) {\n                return index < maxConcurrentRequests;\n              });\n              return _context.abrupt('return', links);\n\n            case 6:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function getProxyList() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  function parsePage(url, parseCallback) {\n    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _this = this;\n\n    var method = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'GET';\n    var formData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    var attempt = function () {\n      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(error) {\n        var proxyUrls, options, requests, abandonFailedResponses, race;\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (error) console.log(error);\n\n                proxyUrls = ['https://thepiratebay.org', 'https://thepiratebay.se', 'https://pirateproxy.one', 'https://ahoy.one'];\n                options = {\n                  mode: 'no-cors',\n                  method: method,\n                  body: formData\n                };\n                requests = proxyUrls.map(function (_url) {\n                  return new _urlParse2.default(url).set('hostname', new _urlParse2.default(_url).hostname).href;\n                }).map(function (_url) {\n                  return (\n                    // $FlowFixMe - To avoid unnessary object type conversion, https://github.com/facebook/flow/issues/1606\n                    (0, _isomorphicFetch2.default)(_url, options).then(function (response) {\n                      return response.text();\n                    }).then(function (body) {\n                      return body.includes('502: Bad gateway') || body.includes('Database maintenance') ? _promise2.default.reject('Database maintenance or 502 error') : _promise2.default.resolve(body);\n                    })\n                  );\n                });\n\n                abandonFailedResponses = function abandonFailedResponses(index) {\n                  var p = requests.splice(index, 1)[0];\n                  p.catch();\n                };\n\n                race = function race() {\n                  if (requests.length < 1) {\n                    return _promise2.default.reject('None of the proxy requests were successful');\n                  }\n                  var indexedRequests = requests.map(function (p, index) {\n                    return p.catch(function () {\n                      throw index;\n                    });\n                  });\n                  return _promise2.default.race(indexedRequests).catch(function (index) {\n                    abandonFailedResponses(index);\n                    return race(requests);\n                  });\n                };\n\n                return _context2.abrupt('return', race(requests));\n\n              case 7:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, _this);\n      }));\n\n      return function attempt(_x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return attempt().catch(function () {\n      return attempt('Failed, retrying');\n    }).then(function (response) {\n      return parseCallback(response, filter);\n    });\n  }\n\n  function parseResults(resultsHTML) {\n    var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var $ = _cheerio2.default.load(resultsHTML);\n    var rawResults = $('table#searchResult tr:has(a.detLink)');\n\n    var results = rawResults.map(function getRawResults() {\n      var name = $(this).find('a.detLink').text();\n      var uploadDate = $(this).find('font').text().match(/Uploaded\\s(?:<b>)?(.+?)(?:<\\/b>)?,/)[1];\n      var size = $(this).find('font').text().match(/Size (.+?),/)[1];\n\n      var seeders = $(this).find('td[align=\"right\"]').first().text();\n      var leechers = $(this).find('td[align=\"right\"]').next().text();\n      var relativeLink = $(this).find('div.detName a').attr('href');\n      var link = _PirateBay.baseUrl + relativeLink;\n      var id = String(parseInt(/^\\/torrent\\/(\\d+)/.exec(relativeLink)[1], 10));\n      var magnetLink = $(this).find('a[title=\"Download this torrent using magnet\"]').attr('href');\n      var uploader = $(this).find('font .detDesc').text();\n      var uploaderLink = _PirateBay.baseUrl + $(this).find('font a').attr('href');\n      var verified = isTorrentVerified($(this));\n\n      var category = {\n        id: $(this).find('center a').first().attr('href').match(/\\/browse\\/(\\d+)/)[1],\n        name: $(this).find('center a').first().text()\n      };\n\n      var subcategory = {\n        id: $(this).find('center a').last().attr('href').match(/\\/browse\\/(\\d+)/)[1],\n        name: $(this).find('center a').last().text()\n      };\n\n      return {\n        id: id,\n        name: name,\n        size: size,\n        link: link,\n        category: category,\n        seeders: seeders,\n        leechers: leechers,\n        uploadDate: uploadDate,\n        magnetLink: magnetLink,\n        subcategory: subcategory,\n        uploader: uploader,\n        verified: verified,\n        uploaderLink: uploaderLink\n      };\n    });\n\n    var parsedResultsArray = results.get().filter(function (result) {\n      return !result.uploaderLink.includes('undefined');\n    });\n\n    return filter.verified === true ? parsedResultsArray.filter(function (result) {\n      return result.verified === true;\n    }) : parsedResultsArray;\n  }\n\n  function parseTvShow(tvShowPage) {\n    var _this2 = this;\n\n    var $ = _cheerio2.default.load(tvShowPage);\n    var seasons = $('dt a').map(function () {\n      return $(_this2).text();\n    }).get();\n    var rawLinks = $('dd');\n\n    var torrents = rawLinks.map(function (element) {\n      return $(_this2).find('a').map(function () {\n        return {\n          title: element.text(),\n          link: _PirateBay.baseUrl + element.attr('href'),\n          id: element.attr('href').match(/\\/torrent\\/(\\d+)/)[1]\n        };\n      }).get();\n    });\n\n    return seasons.map(function (season, index) {\n      return {\n        title: season,\n        torrents: torrents[index]\n      };\n    });\n  }\n\n  function parseTorrentPage(torrentPage) {\n    var $ = _cheerio2.default.load(torrentPage);\n    var name = $('#title').text().trim();\n\n    var size = $('dt:contains(Size:) + dd').text().trim();\n    var uploadDate = $('dt:contains(Uploaded:) + dd').text().trim();\n    var uploader = $('dt:contains(By:) + dd').text().trim();\n    var uploaderLink = _PirateBay.baseUrl + $('dt:contains(By:) + dd a').attr('href');\n    var seeders = $('dt:contains(Seeders:) + dd').text().trim();\n    var leechers = $('dt:contains(Leechers:) + dd').text().trim();\n    var id = $('input[name=id]').attr('value');\n    var link = _PirateBay.baseUrl + '/torrent/' + id;\n    var magnetLink = $('a[title=\"Get this torrent\"]').attr('href');\n    var description = $('div.nfo').text().trim();\n\n    return {\n      category: '',\n      name: name,\n      size: size,\n      seeders: seeders,\n      leechers: leechers,\n      uploadDate: uploadDate,\n      magnetLink: magnetLink,\n      link: link,\n      id: id,\n      description: description,\n      uploader: uploader,\n      uploaderLink: uploaderLink\n    };\n  }\n\n  function parseTvShows(tvShowsPage) {\n    var $ = _cheerio2.default.load(tvShowsPage);\n    var rawTitles = $('dt a');\n    var series = rawTitles.map(function (element) {\n      return {\n        title: element.text(),\n        id: element.attr('href').match(/\\/tv\\/(\\d+)/)[1]\n      };\n    }).get();\n\n    var rawSeasons = $('dd');\n    var seasons = rawSeasons.map(function (element) {\n      return element.find('a').text().match(/S\\d+/g);\n    });\n\n    return series.map(function (s, index) {\n      return {\n        title: s.title,\n        id: s.id,\n        seasons: seasons[index]\n      };\n    });\n  }\n\n  function parseCategories(categoriesHTML) {\n    var $ = _cheerio2.default.load(categoriesHTML);\n    var categoriesContainer = $('select#category optgroup');\n    var currentCategoryId = 0;\n\n    var categories = categoriesContainer.map(function getElements() {\n      currentCategoryId += 100;\n\n      var category = {\n        name: $(this).attr('label'),\n        id: '' + currentCategoryId,\n        subcategories: []\n      };\n\n      $(this).find('option').each(function getSubcategory() {\n        var subcategory = {\n          id: $(this).attr('value'),\n          name: $(this).text()\n        };\n\n        return category.subcategories.push(subcategory);\n      });\n\n      return category;\n    });\n\n    return categories.get();\n  }\n\n  function parseCommentsPage(commentsHTML) {\n    var $ = _cheerio2.default.load(commentsHTML);\n\n    var comments = $.root().contents().map(function getRawComments() {\n      var comment = $(this).find('div.comment').text().trim();\n      var user = $(this).find('a').text().trim();\n\n      return {\n        user: user,\n        comment: comment\n      };\n    });\n\n    return comments.get();\n  }\n});"}